// automatically generated by the FlatBuffers compiler, do not modify


pub mod bench {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum BasicOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Basic<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Basic<'a> {
    type Inner = Basic<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Basic<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Basic {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BasicArgs) -> flatbuffers::WIPOffset<Basic<'bldr>> {
      let mut builder = BasicBuilder::new(_fbb);
      builder.add_id(args.id);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn id(&self) -> u64 {
    self._tab.get::<u64>(Basic::VT_ID, Some(0)).unwrap()
  }
}

pub struct BasicArgs {
    pub id: u64,
}
impl<'a> Default for BasicArgs {
    #[inline]
    fn default() -> Self {
        BasicArgs {
            id: 0,
        }
    }
}
pub struct BasicBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BasicBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Basic::VT_ID, id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BasicBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BasicBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Basic<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ComplexOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Complex<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Complex<'a> {
    type Inner = Complex<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Complex<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Complex {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ComplexArgs<'args>) -> flatbuffers::WIPOffset<Complex<'bldr>> {
      let mut builder = ComplexBuilder::new(_fbb);
      if let Some(x) = args.reference { builder.add_reference(x); }
      if let Some(x) = args.basic { builder.add_basic(x); }
      if let Some(x) = args.name { builder.add_name(x); }
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_BASIC: flatbuffers::VOffsetT = 6;
    pub const VT_REFERENCE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn name(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Complex::VT_NAME, None).unwrap()
  }
  #[inline]
  pub fn basic(&self) -> Basic<'a> {
    self._tab.get::<flatbuffers::ForwardsUOffset<Basic<'a>>>(Complex::VT_BASIC, None).unwrap()
  }
  #[inline]
  pub fn reference(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Complex::VT_REFERENCE, None).unwrap()
  }
}

pub struct ComplexArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub basic: Option<flatbuffers::WIPOffset<Basic<'a >>>,
    pub reference: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for ComplexArgs<'a> {
    #[inline]
    fn default() -> Self {
        ComplexArgs {
            name: None, // required field
            basic: None, // required field
            reference: None, // required field
        }
    }
}
pub struct ComplexBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ComplexBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Complex::VT_NAME, name);
  }
  #[inline]
  pub fn add_basic(&mut self, basic: flatbuffers::WIPOffset<Basic<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Basic>>(Complex::VT_BASIC, basic);
  }
  #[inline]
  pub fn add_reference(&mut self, reference: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Complex::VT_REFERENCE, reference);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ComplexBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ComplexBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Complex<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Complex::VT_NAME,"name");
    self.fbb_.required(o, Complex::VT_BASIC,"basic");
    self.fbb_.required(o, Complex::VT_REFERENCE,"reference");
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod bench

